{
  "name": "Nostr AI Assistant v1.1 – Rod and Jonny copy",
  "nodes": [
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "options": {}
      },
      "id": "b3906f88-36fc-4428-9b00-7431ee2c9b4b",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        4120,
        856
      ],
      "credentials": {
        "anthropicApi": {
          "id": "mGij966sdN3QVYnH",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7459e13e-25b3-45ae-99f0-e626e56ac467",
      "name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        4440,
        856
      ],
      "credentials": {
        "serpApi": {
          "id": "0eb5Kdvm7Cwqz61e",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {},
      "id": "e763f735-cd51-4be1-aab1-c9661650eaed",
      "name": "Calculator",
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        4600,
        856
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "sessionId"
      },
      "id": "18119ab8-dfbc-456e-9fb9-58d0d888549c",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        4280,
        856
      ],
      "notesInFlow": false
    },
    {
      "parameters": {},
      "id": "52576f15-af04-4e44-b0d5-18e90a89c1d4",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        540,
        1140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the single message input\nconst message = $input.item.json; // Access the first item in the input\n\n// Initialize the result array\nlet results = [];\n\n// Safely access the tags array from the message\nconst tags = message.tags || []; // Default to an empty array if undefined\n\n// Extract all \"e\" tags\nconst eTags = tags\n    .filter(tag => tag[0] === 'e') // Filter for \"e\" tags\n    .map(tag => ({\n        e_tag: tag[1],          // The event ID\n        marker: tag[3] || null, // Optional marker, default to null\n        id: message.id          // Include the note ID of the current message\n    }));\n\n// Add the extracted eTags to the results\nresults = results.concat(eTags);\n\n// Return the structured list as separate items\nreturn results.map(eTag => ({ json: eTag }));"
      },
      "id": "d75974fc-68b0-4830-ba45-6ed8a5a60d7f",
      "name": "Get e Tags of Prior Notes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3160,
        760
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "ca2b1eb2-34b9-464c-ac1f-eb61b47e1a49",
      "name": "Loop Over Prior Notes",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3380,
        840
      ]
    },
    {
      "parameters": {
        "strategy": "eventid",
        "eventid": "={{ $json.e_tag }}"
      },
      "id": "a5c43de4-a072-42e9-be42-038f4601762b",
      "name": "Read Prior Note from Thread",
      "type": "n8n-nodes-nostrobots.nostrobotsread",
      "typeVersion": 1,
      "position": [
        3600,
        840
      ]
    },
    {
      "parameters": {
        "resource": "event",
        "content": "={{ $json.output }}",
        "tags": "=[\n  [\n    \"e\",\n    \"{{ $json.id }}\",\n    \"\",\n    \"reply\"\n  ],\n  [\n    \"p\",\n    \"{{ $json.pubkey }}\"\n  ]\n]",
        "relay": "={{ $('Set Variables').first().json.relays }}"
      },
      "id": "3586692c-9af3-401c-b38a-71c2009e5f25",
      "name": "Post Note to Nostr",
      "type": "n8n-nodes-nostrobots.nostrobots",
      "typeVersion": 1,
      "position": [
        5300,
        840
      ],
      "credentials": {
        "nostrobotsApi": {
          "id": "6yX38eeRXkrvTOXv",
          "name": "Nostr Nsec for Jonny (AI Assistant)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5861c447-1730-4bed-9768-80f6a5eac9df",
              "leftValue": "={{ $json.hasResponded }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "99c31d94-33fc-44d5-ab80-8a2c0670014a",
      "name": "Has Responded?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2360,
        1140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de30de32-0a0e-4899-8cde-8816d73102bd",
              "leftValue": "={{ $('Get Mentioned Notes').item.json.pubkey }}",
              "rightValue": "={{ $('Transform Owner Key').item.json.output }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "47911a3c-bc72-488f-a5d8-7b7cdeb1fb37",
      "name": "Is Authorised?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1700,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "// Assuming `items` is the array of merged notes being passed into this node\nconst items = $input.all();\n\n// Separate the notes based on the pubkey\nconst aiPubkey = $node[\"Transform Assistant Key\"].json[\"output\"]; // Replace with the actual pubkey of the AI\nconst aiNotes = [];\nconst otherNotes = [];\n\nitems.forEach(item => {\n  const pubkey = item.json.pubkey;\n  if (pubkey === aiPubkey) {\n    aiNotes.push(item.json);\n  } else {\n    otherNotes.push(item.json);\n  }\n});\n\n// Collect all \"e\" tags from AI notes\nconst aiETags = aiNotes.flatMap(note =>\n  note.tags\n    .filter(tag => tag[0] === \"e\")\n    .map(tag => tag[1]) // Extract the event ID from the \"e\" tag\n);\n\n// Check if each note ID matches any \"e\" tag in AI notes\nconst result = otherNotes.map(note => {\n  const hasResponded = aiETags.includes(note.id); // Check if note.id is in aiETags\n  return {\n    ...note,\n    hasResponded,\n  };\n});\n\n// Return the results in a format n8n expects\nreturn result.map(res => ({\n  json: res\n}));\n"
      },
      "id": "d24270fa-3289-4feb-80b6-76573ee36d76",
      "name": "Check If Responded Already",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        1140
      ]
    },
    {
      "parameters": {
        "content": "## Check Nostr Mentions and Decide if to Respond \n\n- Has the AI been Mentioned in a Note? \n- Is the user who Mentioned the AI Authorised? \n- Does the Note have children that are also Mentions?\n- Has the Note been responded to already?",
        "height": 855.8765683425659,
        "width": 1170.842471864165,
        "color": 4
      },
      "id": "380e4180-4100-46ec-96c0-daa3a8cdff78",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1388.1941319406815,
        467.86636666305424
      ]
    },
    {
      "parameters": {
        "content": "## Create Good Input for the AI \nThe AI should respond so let's give it a high quality input. We source the entire threaded conversation and then structure it with context hints as flat text.",
        "height": 844.5827661417397,
        "width": 1167.2206839105722
      },
      "id": "c8b7b47e-cc1e-4450-9db0-d0fb9b42d634",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2844.2566815188284,
        478
      ]
    },
    {
      "parameters": {
        "content": "## Engage the AI \nWe give the AI the good content, useful tools, and a complete system prompt which explains its context and the tools at its disposal.",
        "height": 843.086457394741,
        "width": 713.8875456537609
      },
      "id": "5419ecc7-a5d6-46a0-93ea-cfd480981a5d",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4040,
        478
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "id": "8743c44b-9f41-4290-8a78-8cbde49237de",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        540,
        960
      ]
    },
    {
      "parameters": {
        "content": "## AI Assistant Workflow\n\nThis workflow triggers a AI Assistant to respond to Notes on Nostr, if–\n\n- Assistant npub is Mentioned in a Note (the user shows intent),\n- User is an Owner of Assistant (the user is authorised),\n- Tagged Note is not the child of another tagged post (if Note is threaded, reply to end of thread), \n- Tagged Note has not yet been replied to by assistant (for deduplication),\n- We run this workflow periodically or if triggered.\n\n## Requirements\n\nTo use this workflow we need–\n\n- [Nostrobots Community Nodes](https://github.com/ocknamo/n8n-nodes-nostrobots/tree/main), by [Ocknamo](https://njump.me/npub1y6aja0kkc4fdvuxgqjcdv4fx0v7xv2epuqnddey2eyaxquznp9vq0tp75l) \n- Credentials for N8N: Nostr, Anthropic, and SerpAPI,\n- Workflow variables in the Set Variables Node: Owner Npub, Owner Name, Assistant Npub, Assistant Name, Relays.",
        "height": 856.3663941159213,
        "width": 892.4874607244267,
        "color": 6
      },
      "id": "7387fd77-d57c-4396-8c15-270e1ff37045",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3ff2ce91-be1b-459b-963a-8c210e60d39a",
              "name": "ownerNpub",
              "value": "npub1r0d8u8mnj6769500nypnm28a9hpk9qg8jr0ehe30tygr3wuhcnvs4rfsft",
              "type": "string"
            },
            {
              "id": "dbebb24e-5ea5-4fd9-8aaf-1b3cc25d0c4e",
              "name": "assistantNpub",
              "value": "npub1ahjpx53ewavp23g5zj9jgyfrpr8djmgjzg5mpe4xd0z69dqvq0kq2lf353",
              "type": "string"
            },
            {
              "id": "12cce8a3-3306-4e99-87b1-dc9d1040cfdc",
              "name": "assistantName",
              "value": "Jonny",
              "type": "string"
            },
            {
              "id": "5e04ae08-df8f-4921-b03d-67952e732fe6",
              "name": "relays",
              "value": "wss://relay.damus.io,wss://relay.primal.net,wss://relay.nostr.band,wss://relay.nostrplebs.com,wss://nostr-01.yakihonne.com,wss://nostr-02.yakihonne.com",
              "type": "string"
            },
            {
              "id": "72ee202e-167c-447c-b87a-bcc1f878548f",
              "name": "ownerName",
              "value": "Rod",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "fc832ff7-1114-4725-bef8-cf28cddb5548",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        960
      ]
    },
    {
      "parameters": {
        "content": "## Post to Nostr \nFor each Note we have the AI Assistant's response and the context of the Note. \nLet's post the Note(s) to Nostr. We pause between each post to avoid timeout errors.",
        "height": 840.0511859958058,
        "width": 968.5037480794283,
        "color": 6
      },
      "id": "13542d3c-bcef-4a10-b0e3-e97a4c162a78",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4780,
        480
      ]
    },
    {
      "parameters": {
        "pubkey": "npub1ahjpx53ewavp23g5zj9jgyfrpr8djmgjzg5mpe4xd0z69dqvq0kq2lf353",
        "unit": "hour",
        "relay": "={{ $('Set Variables').item.json.relays }}"
      },
      "id": "f4c2bf19-8c36-4eff-b554-db5ab499bdaa",
      "name": "Get Recent Responses",
      "type": "n8n-nodes-nostrobots.nostrobotsread",
      "typeVersion": 1,
      "position": [
        1700,
        1140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retrieve all input items (messages)\nconst messages = $input.all();\n\n// Extract all event IDs for comparison\nconst eventIDs = messages.map(message => message.json.id);\n\n// Process each message\nconst results = messages.map(message => {\n    const currentEventId = message.json.id; // The current message's event ID\n    \n    // Check if the current event ID is referenced in another message's \"e\" tags\n    const hasChildMention = messages.some(otherMessage => {\n        const otherTags = otherMessage.json.tags || []; // Safely access tags\n        const otherETags = otherTags.filter(tag => tag[0] === 'e').map(tag => tag[1]); // Extract \"e\" tags\n        return otherETags.includes(currentEventId); // Check if current ID is referenced\n    });\n\n    // Return the original message data with the \"hasChildMention\" flag\n    return {\n        json: {\n            ...message.json, // Spread the original message data\n            hasChildMention  // Add the new flag\n        }\n    };\n});\n\n// Log for debugging\nconsole.log(\"Processed Messages with hasChildMention:\", results);\n\n// Return results for downstream nodes\nreturn results;\n"
      },
      "id": "9592d371-f484-4ead-b4c4-7cb22ee7b158",
      "name": "Check If Has Child Mention",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1700,
        880
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "59b982d5-81e3-4d48-8fd5-bc0df070bdfe",
              "leftValue": "={{ $json.hasChildMention }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2e787c90-c988-4304-98da-231d74aa8a94",
      "name": "Has Child Mention?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1920,
        880
      ]
    },
    {
      "parameters": {},
      "id": "4074d6b8-bf34-4c2d-8b85-d13139681f8c",
      "name": "Ready",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2620,
        1060
      ]
    },
    {
      "parameters": {
        "strategy": "mention",
        "mention": "={{ $('Set Variables').item.json.assistantNpub }}",
        "unit": "hour",
        "relay": "={{ $('Set Variables').item.json.relays }}"
      },
      "id": "e45147b6-e3f8-4308-ba29-33f53e583eea",
      "name": "Get Mentioned Notes",
      "type": "n8n-nodes-nostrobots.nostrobotsread",
      "typeVersion": 1,
      "position": [
        1440,
        960
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "id": "b00dc63e-cff8-4052-94a5-6e02ff8551c0",
      "name": "Input for e Tag Loop",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2940,
        636
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retrieve all input items\nconst items = $input.all();\n\n// Create a map to assign roles to pubkeys\nconst roleMap = {};\nlet userCount = 1;\n\n// Function to get the role based on pubkey\nconst getRole = (pubkey) => {\n    if (pubkey === 'ede41352397758154514148b24112308ced96d121229b0e6a66bc5a2b40c03ec') {\n        return `Assistant @${pubkey}`;\n    }\n    if (!roleMap[pubkey]) {\n        roleMap[pubkey] = `User ${userCount++}`;\n    }\n    return `${roleMap[pubkey]} @${pubkey}`;\n};\n\n// Initialize an array to hold the formatted messages\nlet formattedMessages = [];\n\n// Loop through each message and format it\nitems.forEach((item, index) => {\n    // Extract relevant fields\n    const pubkey = item.json.pubkey;\n    const content = item.json.content;\n    const createdAt = new Date(item.json.created_at * 1000).toISOString(); // Convert UNIX timestamp to ISO format\n\n    // Get the role for the pubkey\n    const role = getRole(pubkey);\n\n    // Format the message with chronological markers and roles\n    formattedMessages.push(\n        `Message ${index + 1}\\nFrom: ${role}\\nSent: ${createdAt}\\nContent: ${content}\\n---`\n    );\n});\n\n// Combine all formatted messages into a single text block\nconst messagesForAI = formattedMessages.join('\\n');\n\n// Return the formatted text block as a single item\nreturn [{ json: { messagesForAI } }];\n"
      },
      "id": "1aed71e1-4940-459a-967d-a11a4ee2e238",
      "name": "Format Thread for AI Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3820,
        616
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6f8258d5-dd0c-48b0-a2a4-b23becd19af3",
      "name": "Loop Over Items To Create Thread",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3820,
        1060
      ]
    },
    {
      "parameters": {},
      "id": "106f2836-970f-4eaa-bc20-d9a5c9e74978",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1920,
        1140
      ]
    },
    {
      "parameters": {
        "operation": "transformKey",
        "relayhints": "={{ $json.relays }}",
        "transformTo": "hexpubkey",
        "transformInput": "={{ $('Set Variables').item.json.ownerNpub }}"
      },
      "id": "bf77a405-d2c4-4b04-bfd0-948266503097",
      "name": "Transform Owner Key",
      "type": "n8n-nodes-nostrobots.nostrobotsutils",
      "typeVersion": 1,
      "position": [
        980,
        960
      ]
    },
    {
      "parameters": {
        "operation": "transformKey",
        "transformTo": "hexpubkey",
        "transformInput": "={{ $('Set Variables').item.json.assistantNpub }}"
      },
      "id": "eefb9688-1378-464f-af29-d0905dfd25e0",
      "name": "Transform Assistant Key",
      "type": "n8n-nodes-nostrobots.nostrobotsutils",
      "typeVersion": 1,
      "position": [
        1200,
        960
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "5b00e36b-3e47-490d-bc7d-f462cdade3eb",
      "name": "Merge Ready to Post Note",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4860,
        618
      ]
    },
    {
      "parameters": {
        "amount": 11
      },
      "id": "d19a7d6c-5e70-4cb6-ae1e-e9b99a8abf0e",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5540,
        840
      ],
      "webhookId": "0c3d7fec-b486-46e8-89e7-0c11cd59df10"
    },
    {
      "parameters": {},
      "id": "ef9c5713-3295-49bf-bfa4-d24ab0e21021",
      "name": "Take No Action",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2620,
        860
      ]
    },
    {
      "parameters": {},
      "id": "e2b18d60-2366-448f-9634-5c2bb5fb69ae",
      "name": "All Notes Posted Successfully",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5540,
        680
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e2292c43-293c-4204-821a-54a67da19817",
      "name": "Loop Over Notes",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        5080,
        620
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "id",
        "joinMode": "keepEverything",
        "options": {}
      },
      "id": "749cfd8b-198c-40ef-827a-7aeb9f768bfa",
      "name": "Merge Thread as Table",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3600,
        616
      ]
    },
    {
      "parameters": {
        "text": "=Here is a conversation. Respond to the latest message in this conversation as a helpful assistant with emojis: {{ $json.messagesForAI }}",
        "options": {
          "systemMessage": "=Assistant (aka {{ $('Set Variables').first().json.assistantName }}) is a large language model who operates on the Nostr network. A workflow exists to invoke Assistant if Assistant is tagged. One method for tagging Assistant is to specify Assistant's npub public key i.e. \"nostr:{{ $('Set Variables').first().json.assistantNpub }}\".\n\nAssistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nAssistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n\nWhen Assistant is given a message it will be asked to respond. Assistants workflow permits it only to be given messages when mentioned by its owner {{ $('Set Variables').first().json.ownerName }} at nostr:{{ $('Set Variables').first().json.ownerNpub }}.\n\nAssistant may be given a message history including older messages in a conversation. When so given, Assistant should always use this context and acknowledge it in the reply where appropriate. Assistant should respond to the latest message and use the older messages to inform its context. Old messages may include messages previously sent by Assistant. \n\nAssistant has a window memory of old messages which it can use to inform its context. \n\nAssistant is also able to use the internet and a calculator. Assistant's answers can include links to websites it finds on the internet. \n\nWhen responding, Assistant should disregard the the npub or nprofile used to tag it, as that is a part of the process of invoking Assistant. It should respond to the rest of the message.\n\nWhen Assistant responds, it should use an Australian localisation. This means to use Australian english, Australian date-time format, Celsius rather than Fahrenheit, kilometres rather than miles, etc."
        }
      },
      "id": "33391f7c-9f5f-4d07-8f54-8c40bef07ffc",
      "name": "AI Assistant",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        4260,
        616
      ],
      "typeVersion": 1.2,
      "alwaysOutputData": false
    }
  ],
  "pinData": {},
  "connections": {
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get e Tags of Prior Notes": {
      "main": [
        [
          {
            "node": "Loop Over Prior Notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Prior Notes": {
      "main": [
        [
          {
            "node": "Merge Thread as Table",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Prior Note from Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Prior Note from Thread": {
      "main": [
        [
          {
            "node": "Loop Over Prior Notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Responded Already": {
      "main": [
        [
          {
            "node": "Has Responded?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Authorised?": {
      "main": [
        [
          {
            "node": "Check If Has Child Mention",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Take No Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Transform Owner Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Responses": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Has Responded?": {
      "main": [
        [
          {
            "node": "Take No Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Has Child Mention": {
      "main": [
        [
          {
            "node": "Has Child Mention?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Child Mention?": {
      "main": [
        [
          {
            "node": "Take No Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Recent Responses",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Mentioned Notes": {
      "main": [
        [
          {
            "node": "Is Authorised?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input for e Tag Loop": {
      "main": [
        [
          {
            "node": "Get e Tags of Prior Notes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Thread as Table",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Ready": {
      "main": [
        [
          {
            "node": "Loop Over Items To Create Thread",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Ready to Post Note",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Thread for AI Input": {
      "main": [
        [
          {
            "node": "Loop Over Items To Create Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items To Create Thread": {
      "main": [
        [
          {
            "node": "AI Assistant",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Input for e Tag Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Check If Responded Already",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Owner Key": {
      "main": [
        [
          {
            "node": "Transform Assistant Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Assistant Key": {
      "main": [
        [
          {
            "node": "Get Mentioned Notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Ready to Post Note": {
      "main": [
        [
          {
            "node": "Loop Over Notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Note to Nostr": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Notes": {
      "main": [
        [
          {
            "node": "All Notes Posted Successfully",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post Note to Nostr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Thread as Table": {
      "main": [
        [
          {
            "node": "Format Thread for AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Assistant": {
      "main": [
        [
          {
            "node": "Merge Ready to Post Note",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2dca24cf-8097-4447-9657-fd5ef139ee00",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "116b49d6f3394f8a5d690ef016c12ee9efff737700b050bfcafac43155fb279c"
  },
  "id": "wxciHJNJvXiewoJQ",
  "tags": [
    {
      "createdAt": "2024-11-27T02:53:19.906Z",
      "updatedAt": "2024-11-27T02:53:19.906Z",
      "id": "BJR0Pl8nE9vEujFS",
      "name": "Experiment"
    },
    {
      "createdAt": "2024-11-19T03:08:10.445Z",
      "updatedAt": "2024-11-19T03:08:23.808Z",
      "id": "egAJeVFA9DrO3YrB",
      "name": "AI Assistant"
    },
    {
      "createdAt": "2024-11-19T03:08:06.146Z",
      "updatedAt": "2024-11-19T03:08:06.146Z",
      "id": "zmiLz0ZrQJaT4QMQ",
      "name": "Nostr"
    }
  ]
}